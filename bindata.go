// Code generated by go-bindata.
// sources:
// templates/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x5d\x8f\xab\x36\x10\x7d\xe7\x57\x4c\x5d\x55\x4a\x74\x6f\x20\x64\x77\xaf\x2a\x16\x78\x68\x55\x55\x95\xee\xd3\x5d\xed\x0f\x30\xf6\x10\xac\x35\x36\xb2\x4d\x3e\x1a\xe5\xbf\x57\x0e\x6c\x02\x4e\x5a\x95\xbc\x18\xce\xb1\x67\xe6\xf8\xcc\x24\x6f\x5c\x2b\xcb\x28\xca\x1b\xa4\xbc\x8c\x00\x00\xf2\x16\x1d\x05\x45\x5b\x2c\xc8\x4e\xe0\xbe\xd3\xc6\x11\x60\x5a\x39\x54\xae\x20\x7b\xc1\x5d\x53\x70\xdc\x09\x86\xab\xcb\xcb\x57\x10\x4a\x38\x41\xe5\xca\x32\x2a\xb1\x48\xc9\x78\x90\x75\x47\x89\xc3\xda\x3f\x95\xe6\x47\x38\x5d\x5f\xfd\x53\x6b\xe5\x32\x48\x9f\xbb\x43\x92\xc6\x9b\x17\x6c\xc1\x52\x65\x57\x16\x8d\xa8\x5f\x67\xcc\x96\x9a\xad\x50\x19\x3c\xaf\xbb\x03\xd0\xde\xe9\x10\x3e\x0c\xc9\x64\xf0\xed\x65\xdd\x1d\xe6\xa8\x14\x0a\x57\x0d\x8a\x6d\xe3\xa3\xc5\xdf\x5e\xef\x92\x58\x59\xf1\x37\x66\x90\xfe\x1a\x6e\x65\x5a\x6a\x93\xc1\xcf\x69\xe5\x7f\x73\xac\xa3\x9c\x0b\xb5\xcd\x60\x0d\xe9\xba\x3b\x5c\xb1\x73\x74\x5d\x36\xe9\xd7\xdb\x7a\x33\x59\x3f\x05\x4a\x04\x29\x6e\x1e\x1d\x46\x83\x3d\x0e\x0f\x6e\xc5\x91\x69\x43\x9d\xd0\x2a\x03\xa5\x15\x3e\xda\x28\x54\xd7\xbb\x5b\xf0\xaa\x77\x4e\xab\xe0\xb0\x51\xbd\x74\xbd\xfe\x65\x5e\x65\xa5\x0d\x47\x93\x41\x1a\x4a\x73\x2d\xff\x39\x44\x26\x8a\x3e\xbd\x4c\xc1\xf3\x60\x8c\x64\x74\x46\x9e\x0c\xb6\x8b\x72\xef\x8d\xd1\x35\xfe\x13\x9a\x9b\x6d\x72\x2e\x76\xc0\x24\xb5\xb6\x20\x42\x39\xa3\x49\x39\x0b\x96\x37\x69\xf9\xd6\x68\xe3\x50\xc1\xfb\x8f\xef\x79\xd2\xa4\x73\xc2\xe9\x04\xa2\x86\xd8\x0e\x1c\xe4\x70\x3e\x07\x07\x6c\xca\x9c\x42\x63\xb0\x2e\x48\x72\x3a\xcd\xa9\x61\x34\xcb\x8c\xe8\x5c\x19\xed\xa8\x81\x2d\xba\x77\x23\xa1\x80\xbd\x50\x5c\xef\x63\xa9\xd9\xe5\x26\x5e\x2f\x68\x45\x2d\x0e\xf0\xc8\x8b\x3b\xa3\x9d\x66\x5a\xc2\x17\x20\x49\x42\xe0\xcb\x88\xc4\x8d\xb6\x0e\x22\xae\x59\xdf\xa2\x72\xf1\xde\x08\x87\x8b\xcf\xfd\x9e\xec\xb9\xa7\xd3\x2d\xb1\xf3\x79\x39\x97\x7c\xd4\x75\x4c\xee\x1e\xa1\x65\x9e\x34\x9b\x3b\x61\x50\x5a\xbc\xa8\x83\xc6\x68\xf3\x48\x19\xaf\xc7\x27\xf8\xef\x47\x84\x1b\x2b\x73\xcf\x53\x3c\x64\x75\x81\xb6\x49\xf8\xe1\x62\x5c\x10\xbc\x20\xbd\x91\x63\xf1\x04\x3a\x49\x19\x36\x5a\x72\x34\x05\xc1\x03\x6d\x3b\x89\x31\xd3\x2d\x01\xad\x3e\xf0\xd8\x19\xf4\x5e\x31\xe8\x7a\xa3\xc0\xf4\xea\xed\xa2\xca\x02\x77\xa8\xdc\x92\x40\x52\xfe\x77\xae\x0f\x3e\x0c\x0d\xe3\x8e\x1d\x16\x64\x78\xf1\xb1\x98\x14\xec\xa3\x20\x63\x5e\xef\x3f\xbe\x2f\x96\xa4\xfc\x53\xff\x94\x27\x03\x67\xe2\xe1\x84\x8b\x5d\x19\x3d\xf4\x34\x93\x48\x0d\x29\xa7\x94\xa1\x2f\x3e\x9b\x20\x0f\x6f\xf5\xea\x93\x2d\xba\x3f\x24\xfa\xe5\x6f\xc7\xbf\xf8\x62\x2a\xd2\x32\xae\x35\xeb\xed\x62\xf9\x7a\x8b\x5a\xf7\x8a\x79\x7b\x4e\x35\x59\x06\x63\x40\xd4\xb0\xc0\xf8\x03\x8f\xbf\x6b\x8e\x50\x14\x90\x3e\x85\x14\xff\x4c\x6b\xbe\x37\xe2\x28\x7d\x4d\xa5\xc5\x39\x7a\x7e\x34\x9e\xae\x79\x4d\x4f\x0d\x82\xfa\x86\x72\x15\x14\xff\xaf\xf8\x70\x86\x2b\xab\x25\xc6\x52\x6f\x17\xae\x8a\x77\x54\xf6\x18\x50\x82\x06\x86\x62\xec\xb9\x4f\xfa\x9c\x3d\xad\xef\x7e\xb6\x8d\xb7\x15\xe5\xc9\x30\xd5\xfc\x98\xbb\xfc\xcb\xfe\x13\x00\x00\xff\xff\xcb\x10\x68\x4e\x6d\x07\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 1901, mode: os.FileMode(438), modTime: time.Unix(1499922926, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

